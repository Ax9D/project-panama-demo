/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'c'
    id "io.github.krakowski.jextract" version "0.4.1"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'
}

model {
    components {
        nativeLib(NativeLibrarySpec) {
            sources {
                c {
                    source {
                        srcDir 'src/main/c' // Path to your C/C++ source files
                    }
                }
            }
        }
    }
}
run.dependsOn 'nativeLibSharedLibrary'
// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jextract {
    header("${project.projectDir}/src/main/c/native.h") {
        // The library name
        libraries = [ 'nativeLib' ]

        // The package under which all source files will be generated
        targetPackage = 'org.nativelib'

        // The generated class name
        className = 'NativeLib'
    }
}

application {
    // Define the main class for the application.
    mainClass = 'panama_demo.App'
    applicationDefaultJvmArgs = ["-Djava.library.path=" + file("${buildDir}/libs/nativeLib/shared").absolutePath, "--enable-preview"]
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
